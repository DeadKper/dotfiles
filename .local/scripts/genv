#!/usr/bin/env bash

function main() {
  GENV_LOG="${XDG_CACHE_HOME:-$HOME/.cache}/genv"

  init
  parse "$@"
  config

  if [[ "${#POSITIONAL_ARGS[@]}" -eq 0 ]]; then
    [[ "${#COMMAND_PRE[@]}" -gt 0 ]] && print_array "${COMMAND_PRE[@]}"
    print_array "${COMMAND[@]}" "${ARGS_PRE[@]}" "${POSITIONAL_ARGS[@]}" "${ARGS_POST[@]}"
    [[ "${#COMMAND_POST[@]}" -gt 0 ]] && print_array "${COMMAND_POST[@]}"
    return 0
  else
    echo -n > "$GENV_LOG"
    [[ "${#COMMAND_PRE[@]}" -gt 0 ]] && print_array "${COMMAND_PRE[@]}" >> "$GENV_LOG" && eval "$(print_array "${COMMAND_PRE[@]}")"
    print_array "${COMMAND[@]}" "${ARGS_PRE[@]}" "${POSITIONAL_ARGS[@]}" "${ARGS_POST[@]}" >> "$GENV_LOG"
    function post() {
      local code=$?
      [[ "${#COMMAND_POST[@]}" -gt 0 ]] && print_array "${COMMAND_POST[@]}" >> "$GENV_LOG" && eval "$(print_array "${COMMAND_POST[@]}")"
      return $code
    }
    trap "trap - hup int kill term exit; post" hup int kill term exit
    "${COMMAND[@]}" "${ARGS_PRE[@]}" "${POSITIONAL_ARGS[@]}" "${ARGS_POST[@]}"
  fi
}

function init_string() {
  cat <<EOF
#!/usr/bin/env bash

ENV_VARS=()
DXVK_CONFIG=()
VKD3D_CONFIG=()
WINEDLLOVERRIDES=()
VKD3D_DISABLE_EXTENSIONS=()
GAMESCOPE_ARGS=()
ARGS_PRE=()
ARGS_POST=()

USE_GAMEMODE=
USE_MANGOHUD=
USE_VKBASALT=

USE_GAMESCOPE=
GAMESCOPE_AUTO_OUTPUT_SIZE=
GAMESCOPE_AUTO_NESTED_SIZE=

COMMAND_PRE=()
COMMAND_POST=()
EOF
}

function init() {
  source <(init_string)

  CONF_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/genv"
  CONF_VARS="$CONF_DIR/config.sh"
  CONF_GAMES="$CONF_DIR/game_cfg.sh"

  if [[ ! -d "$CONF_DIR" ]]; then
    mkdir -p "$CONF_DIR" || exit 1
  fi
  if [[ ! -f "$CONF_VARS" ]]; then
    init_string > "$CONF_VARS"
  else
    source "$CONF_VARS"
  fi
  if [[ ! -f "$CONF_GAMES" ]]; then
    cat <<EOF > "$CONF_GAMES"
#!/usr/bin/env bash

case "\${POSITIONAL_ARGS[*]} " in
  *"/Terraria "*)
    USE_GAMEMODE=true
    ;;
  *)
    USE_GAMEMODE=true
    ;;
esac
EOF
  fi

  case "$(lspci -vnn | grep VGA)" in
    *NVIDIA*)
      GPU_VENDOR=NVIDIA
      ;;
    *AMD*)
      GPU_VENDOR=AMD
      ;;
    *INTEL*)
      GPU_VENDOR=INTEL
      ;;
    *)
      GPU_VENDOR=UNKNOWN
      ;;
  esac

  COMMAND=()
  POSITIONAL_ARGS=()
}

function config() {
  source "$CONF_GAMES"

  local display="$(xrandr | grep '\*+$')"
  if [[ -n "$GAMESCOPE_AUTO_NESTED_SIZE" ]]; then
    add_if_missing GAMESCOPE_ARGS \
      --nested-height "$(sed 's/^\s*[^x]*x//;s/\s.*//' <<< "$display")" \
      --nested-width "$(sed 's/^\s*//;s/x.*//' <<< "$display")"
  fi
  if [[ -n "$GAMESCOPE_AUTO_OUTPUT_SIZE" ]]; then
    add_if_missing GAMESCOPE_ARGS \
      --output-height "$(sed 's/^\s*[^x]*x//;s/\s.*//' <<< "$display")" \
      --output-width "$(sed 's/^\s*//;s/x.*//' <<< "$display")"
  fi

  local display="$(xrandr | grep '\*+$')"

  if [[ -n "$USE_MANGOHUD" ]] && command -v mangohud &>/dev/null; then
    if [[ -n "$USE_GAMESCOPE" ]]; then
      add_if_missing GAMESCOPE_ARGS \
        --mangoapp
    else
      add_if_missing ENV_VARS \
        MANGOHUD=1
    fi
  fi

  if [[ -n "$USE_VKBASALT" ]] && command -v vkbasalt &>/dev/null; then
    add_if_missing ENV_VARS \
      ENABLE_VKBASALT=1
  fi

  if [[ -n "$USE_GAMEMODE" ]] && command -v gamemoderun &>/dev/null; then
    COMMAND+=("$(command -v gamemoderun)")
  fi

  if [[ -n "$USE_GAMESCOPE" ]] && command -v gamescope &>/dev/null; then
    COMMAND+=("$(command -v gamescope)" "${GAMESCOPE_ARGS[@]}" --)
  fi

  if [[ "${#DXVK_CONFIG[@]}" -gt 0 ]]; then
    ENV_VARS=("DXVK_CONFIG=$(comma_separated "${DXVK_CONFIG[@]}")" "${ENV_VARS[@]}")
  fi

  if [[ "${#VKD3D_CONFIG[@]}" -gt 0 ]]; then
    ENV_VARS=("VKD3D_CONFIG=$(comma_separated "${VKD3D_CONFIG[@]}")" "${ENV_VARS[@]}")
  fi

  if [[ "${#VKD3D_DISABLE_EXTENSIONS[@]}" -gt 0 ]]; then
    ENV_VARS=("VKD3D_DISABLE_EXTENSIONS=$(comma_separated "${VKD3D_DISABLE_EXTENSIONS[@]}")" "${ENV_VARS[@]}")
  fi

  if [[ "${#WINEDLLOVERRIDES[@]}" -gt 0 ]]; then
    ENV_VARS=("WINEDLLOVERRIDES=$(comma_separated "${WINEDLLOVERRIDES[@]}")=n,b" "${ENV_VARS[@]}")
  fi

  if [[ "${#ENV_VARS[@]}" -gt 0 ]]; then
    COMMAND=(env "${ENV_VARS[@]}" "${COMMAND[@]}")
  fi
}

function parse() {
  local option
  local next
  local last
  local count

  unset option
  unset next

  while [[ $# -gt 0 ]]; do
    if [[ "$1" == "$last" && "$#" == "$count" ]]; then
      echo infinite loop found, termintaing >&2
      exit 1
    fi

    if [[ -n "${next+x}" && "$next" == "$1" ]]; then
      shift
      set -- "-$next" "$@"
    fi

    if [[ -n "${next+x}" ]]; then
      unset option
      unset next
    fi

    [[ "$1" == -* ]] || break

    if [[ "$1" == -- ]]; then
      shift
      break
    elif [[ "$1" == --* ]]; then
      option="$1"
    elif [[ "$1" == -* ]]; then
      option="$1"
      if [[ "${#option}" -gt 2 ]]; then
        next="${option[@]:2}"
        option="${option[@]:0:2}"
        shift
        set -- "$option" "$next" "$@"
      fi
    else
      break
    fi

    last="$1"
    count="$#"

    case "$1" in
      -g) # enable gamemode
        USE_GAMEMODE=true
        shift
        ;;
      -G) # disable gamemode
        USE_GAMEMODE=
        shift
        ;;
      -m) # enable mangohud
        USE_MANGOHUD=true
        shift
        ;;
      -M) # disable mangohud
        USE_MANGOHUD=
        shift
        ;;
      -v) # enable vkbasalt
        USE_VKBASALT=true
        shift
        ;;
      -V) # disable vkbasalt
        USE_VKBASALT=
        shift
        ;;
      -l) # set PROTON_LOG to 1
        add_if_missing ENV_VARS \
          PROTON_LOG=1
        shift
        ;;
      -L) # log vkBasalt output
        add_if_missing ENV_VARS \
          VKBASALT_LOG_LEVEL=trace \
          VKBASALT_LOG_FILE="$HOME/vkBasalt.log"
        shift
        ;;
      -s) # enable gamescope
        USE_GAMESCOPE=true
        local display="$(xrandr | grep '\*+$')"
        # local refresh="$(sed -E 's/.*\s([0-9.]+)\*\+$/\1/' <<< "$display" | awk '{printf("%.0f\n",$0+0.5)}')"
        add_if_missing GAMESCOPE_ARGS \
          --adaptive-sync
        add_if_missing GAMESCOPE_ARGS \
          --nested-unfocused-refresh 5
        # add_if_missing GAMESCOPE_ARGS \
        #   --nested-refresh "$(awk '{printf "%0.f\n",$1*2}' <<< "$refresh")"
        #   --framerate-limit "$(awk '{printf "%0.f\n",$1*2}' <<< "$refresh")"
        shift
        ;;
      -S) # disable gamescope
        USE_GAMESCOPE=
        shift
        ;;
      -e) # enable gamescope steam integration
        add_if_missing GAMESCOPE_ARGS \
          --steam
        shift
        ;;
      -y) # expose wayland to gamescope
        add_if_missing GAMESCOPE_ARGS \
          --expose-wayland --backend wayland
        shift
        ;;
      -b) # set gamescope as borderless
        add_if_missing GAMESCOPE_ARGS \
          --borderless
        shift
        ;;
      -f) # set gamescope as fullscreen
        add_if_missing GAMESCOPE_ARGS \
          --fullscreen
        shift
        ;;
      -F) # set gamescope as fsr
        add_if_missing GAMESCOPE_ARGS \
          --filter fsr \
          --scaler auto \
          --fsr-sharpness 20
        shift
        ;;
      -c) # set gamescope force composition and immediate flips
        add_if_missing GAMESCOPE_ARGS \
          --immediate-flips \
          --force-composition
        shift
        ;;
      -a) # set gamescope nested size to screen size
        GAMESCOPE_AUTO_NESTED_SIZE=true
        shift
        ;;
      -A) # set gamescope output size to screen size
        GAMESCOPE_AUTO_OUTPUT_SIZE=true
        shift
        ;;
      -w) # (WIDTH) set gamescope width
        add_if_missing GAMESCOPE_ARGS \
          --nested-width "$2"
        shift 2 || { usage && exit 1; }
        ;;
      -h) # (HEIGHT) set gamescope height
        add_if_missing GAMESCOPE_ARGS \
          --nested-height "$2"
        shift 2 || { usage && exit 1; }
        ;;
      --install) # symlink this app to /bin/ (requires sudo)
        sudo ln -s "$0" /bin/
        exit 0
        ;;
      --help) # print help message
        usage
        exit 0
        ;;
    esac
  done

  [[ $# -gt 0 ]] && POSITIONAL_ARGS+=("$@")
}

function usage() {
  printf '%s\n' \
    "usage: $(basename "$0") [OPTIONS] [ARGUMENTS]" \
    "" \
    options:
  sed -zE 's/.*\sparse\(\)\s*\{\n*//;s/\n\}\n.*/\n/' "$0" \
    | grep -E '^\s*-[a-zA-Z0-9|\-]+\)\s*#' \
    | sed 's/^\s*/  /;s/[|]/, /g;s/[)]\s*#\s*/\t/' \
    | sed -E 's/\t\(([^\)]+)\)\s*/ \1\t/' \
    | column -s $'\t' -t
}

function index() {
  local value="$1"
  shift
  local size="$#"
  for ((i = 0; i < $size; i++)); do
    [[ "$1" == "${value}" ]] && {
      echo $i
      return
    }
    shift
  done
  echo -1
  return -1
}

function add_if_missing() {
  local var="$1"
  eval "local array=(\"\${${var}[@]}\")"
  shift
  local values=("$@")

  if [[ "$(index "${values[0]}" "${array[@]}")" -eq -1 ]]; then
    eval "${var}+=(\"\${values[@]}\")"
  fi
}

function comma_separated() {
  printf '%s\n' "$@" | sort -u | sed -z 's/\n/,/g;s/,$/\n/'
}

function print_array() {
  printf '%s\n' "$@" \
    | awk '{if ($0 ~ / /) {gsub(/'\''/,"'\''\\'\'''\''",$0); print "'\''"$0"'\''"} else {print}}' \
    | sed -z 's/\n/ /g;s/ $/\n/'
}

main "$@"
