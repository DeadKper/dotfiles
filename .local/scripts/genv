#!/usr/bin/env bash

function main() {
  # Default vars
  ENV=(
    __GL_SHADER_DISK_CACHE=1
    __GL_SHADER_DISK_CACHE_SKIP_CLEANUP=1
    DXVK_HUD=compiler
  )
  DXVK_CONFIG=()
  VKD3D_CONFIG=(
    force_host_cached
  )
  WINEDLLOVERRIDES=()
  VKD3D_DISABLE_EXTENSIONS=()
  GAMESCOPE_ARGS=()
  EXEC=()

  USE_GAMESCOPE=
  USE_GAMEMODE=true
  USE_MANGOHUD=true
  USE_VKBASALT=true

  # Generated, do not modify
  COMMAND=()
  POSITIONAL_ARGS=()

  parse "$@"
  config

  if [[ "${#POSITIONAL_ARGS[@]}" -eq 0 ]]; then
    printf "%s\n" "${COMMAND[@]}" "${POSITIONAL_ARGS[@]}" | sed -r "s/([^ ]* .*)/'\1'/" | sed -z 's/\n/ /g;s/\s*$/\n/'
  else
    printf "%s\n" "${COMMAND[@]}" "${POSITIONAL_ARGS[@]}" | sed -r "s/([^ ]* .*)/'\1'/" | sed -z 's/\n/ /g;s/\s*$/\n/' > ~/.cache/genv
    "${COMMAND[@]}" "${POSITIONAL_ARGS[@]}"
  fi
}

function config() {
  if [[ "${POSITIONAL_ARGS[*]}" == */MonsterHunterWilds.exe ]]; then
    add_if_missing ENV \
      PROTON_ENABLE_NGX_UPDATER=1 \
      PROTON_HIDE_NVIDIA_GPU=1 \
      PROTON_ENABLE_NVAPI=1
    add_if_missing VKD3D_DISABLE_EXTENSIONS \
      VK_NV_low_latency2
    add_if_missing WINEDLLOVERRIDES \
      dinput8=n,b
  elif [[ "${POSITIONAL_ARGS[*]}" == */MonsterHunterRise.exe ]]; then
    add_if_missing WINEDLLOVERRIDES \
      dinput8=n,b
  elif [[ "${POSITIONAL_ARGS[*]}" == */HoloCure.exe ]]; then
    USE_GAMESCOPE=true
  elif [[ "${POSITIONAL_ARGS[*]}" == */Terraria ]]; then
    if [[ "$(xrandr | grep '\*+$' | sed 's/^\s*//;s/x.*//')" -lt 1920 ]]; then
      USE_GAMESCOPE=true
      add_if_missing GAMESCOPE_ARGS \
        --nested-height 1080 \
        --nested-width 1920
    fi
  fi

  if [[ -n "$USE_MANGOHUD" ]] && command -v mangohud &>/dev/null; then
    if [[ -n "$USE_GAMESCOPE" ]]; then
      add_if_missing GAMESCOPE_ARGS \
        --mangoapp
    else
      add_if_missing ENV \
        MANGOHUD=1
    fi
  fi

  if [[ -n "$USE_VKBASALT" ]] && command -v vkbasalt &>/dev/null; then
    add_if_missing ENV \
      ENABLE_VKBASALT=1
  fi

  if [[ -n "$USE_GAMEMODE" ]] && command -v gamemoderun &>/dev/null; then
    COMMAND+=("$(command -v gamemoderun)")
  fi

  if [[ -n "$USE_GAMESCOPE" ]] && command -v gamescope &>/dev/null; then
    COMMAND+=("$(command -v gamescope)" "${GAMESCOPE_ARGS[@]}" --)
  fi

  if [[ "${#DXVK_CONFIG[@]}" -gt 0 ]]; then
    ENV=("DXVK_CONFIG=$(printf '%s\n' "${DXVK_CONFIG[@]}" | sort -u | sed -z 's/\n/,/g;s/,$//')" "${ENV[@]}")
  fi

  if [[ "${#VKD3D_CONFIG[@]}" -gt 0 ]]; then
    ENV=("VKD3D_CONFIG=$(printf '%s\n' "${VKD3D_CONFIG[@]}" | sort -u | sed -z 's/\n/,/g;s/,$//')" "${ENV[@]}")
  fi

  if [[ "${#VKD3D_DISABLE_EXTENSIONS[@]}" -gt 0 ]]; then
    ENV=("VKD3D_DISABLE_EXTENSIONS=$(printf '%s\n' "${VKD3D_DISABLE_EXTENSIONS[@]}" | sort -u | sed -z 's/\n/,/g;s/,$//')" "${ENV[@]}")
  fi

  if [[ "${#WINEDLLOVERRIDES[@]}" -gt 0 ]]; then
    ENV=("WINEDLLOVERRIDES=$(printf '%s\n' "${WINEDLLOVERRIDES[@]}" | sort -u | sed -z 's/\n/ /g;s/ $//')" "${ENV[@]}")
  fi

  if [[ "${#ENV[@]}" -gt 0 ]]; then
    COMMAND=(env "${ENV[@]}" "${COMMAND[@]}")
  fi
}

function parse() {
  local option
  local next
  local last
  local count

  unset option
  unset next

  while [[ $# -gt 0 ]]; do
    if [[ "$1" == "$last" && "$#" == "$count" ]]; then
      echo infinite loop found, termintaing >&2
      exit 1
    fi

    if [[ -n "${next+x}" && "$next" == "$1" ]]; then
      shift
      set -- "-$next" "$@"
    fi

    if [[ -n "${next+x}" ]]; then
      unset option
      unset next
    fi

    [[ "$1" == -* ]] || break

    if [[ "$1" == -- ]]; then
      shift
      break
    elif [[ "$1" == --* ]]; then
      option="$1"
    elif [[ "$1" == -* ]]; then
      option="$1"
      if [[ "${#option}" -gt 2 ]]; then
        next="${option[@]:2}"
        option="${option[@]:0:2}"
        shift
        set -- "$option" "$next" "$@"
      fi
    else
      break
    fi

    last="$1"
    count="$#"

    case "$1" in
      -g) # use gamemode
        USE_GAMEMODE=true
        shift
        ;;
      -G) # disable gamemode
        USE_GAMEMODE=
        shift
        ;;
      -m) # use mangohud
        USE_MANGOHUD=true
        shift
        ;;
      -M) # disable mangohud
        USE_MANGOHUD=
        shift
        ;;
      -v) # use vkbasalt
        USE_VKBASALT=true
        shift
        ;;
      -V) # disable vkbasalt
        USE_VKBASALT=
        shift
        ;;
      -l) # set PROTON_LOG to 1
        add_if_missing ENV \
          PROTON_LOG=1
        shift
        ;;
      -s) # use gamescope
        USE_GAMESCOPE=true
        local display="$(xrandr | grep '\*+$')"
        # local refresh="$(sed -E 's/.*\s([0-9.]+)\*\+$/\1/' <<< "$display" | awk '{printf("%.0f\n",$0+0.5)}')"
        add_if_missing GAMESCOPE_ARGS \
          --output-height "$(sed 's/^\s*[^x]*x//;s/\s.*//' <<< "$display")" \
          --output-width "$(sed 's/^\s*//;s/x.*//' <<< "$display")"
        add_if_missing GAMESCOPE_ARGS \
          --adaptive-sync
        add_if_missing GAMESCOPE_ARGS \
          --nested-unfocused-refresh 5
        # add_if_missing GAMESCOPE_ARGS \
        #   --nested-refresh "$(awk '{printf "%0.f\n",$1*2}' <<< "$refresh")"
        #   --framerate-limit "$(awk '{printf "%0.f\n",$1*2}' <<< "$refresh")"
        shift
        ;;
      -b) # set gamescope as borderless
        add_if_missing GAMESCOPE_ARGS \
          --borderless
        shift
        ;;
      -f) # set gamescope as fullscreen
        add_if_missing GAMESCOPE_ARGS \
          --fullscreen
        shift
        ;;
      -F) # set gamescope as fsr
        add_if_missing GAMESCOPE_ARGS \
          --filter fsr \
          --scaler auto \
          --fsr-sharpness 20
        shift
        ;;
      -S) # disable gamescope
        USE_GAMESCOPE=
        shift
        ;;
      -c) # set gamescope force composition and immediate flips
        add_if_missing GAMESCOPE_ARGS \
          --immediate-flips \
          --force-composition
        shift
        ;;
      -e) # use gamescope steam integration
        add_if_missing GAMESCOPE_ARGS \
          --steam
        shift
        ;;
      -y) # expose wayland to gamescope
        add_if_missing GAMESCOPE_ARGS \
          --expose-wayland --backend wayland
        shift
        ;;
      -a) # set gamescope nested size to current size
        local display="$(xrandr | grep '\*+$')"
        add_if_missing GAMESCOPE_ARGS \
          --nested-height "$(sed 's/^\s*[^x]*x//;s/\s.*//' <<< "$display")" \
          --nested-width "$(sed 's/^\s*//;s/x.*//' <<< "$display")"
        shift
        ;;
      -w) # (WIDTH) set gamescope width
        add_if_missing GAMESCOPE_ARGS \
          --nested-width "$2"
        shift 2 || { usage && exit 1; }
        ;;
      -h) # (HEIGHT) set gamescope height
        add_if_missing GAMESCOPE_ARGS \
          --nested-height "$2"
        shift 2 || { usage && exit 1; }
        ;;
      --install) # symlink this app to /bin/ (requires sudo)
        sudo ln -s "$0" /bin/
        exit 0
        ;;
      --help) # print help message
        usage
        exit 0
        ;;
    esac
  done

  [[ $# -gt 0 ]] && POSITIONAL_ARGS+=("$@")
}

function usage() {
  printf '%s\n' \
    "usage: $(basename "$0") [OPTIONS] [ARGUMENTS]" \
    "" \
    options:
  sed -zE 's/.*\sparse\(\)\s*\{\n*//;s/\n\}\n.*/\n/' "$0" \
    | grep -E '^\s*-[a-zA-Z0-9|\-]+\)\s*#' \
    | sed 's/^\s*/  /;s/[|]/, /g;s/[)]\s*#\s*/\t/' \
    | sed -E 's/\t\(([^\)]+)\)\s*/ \1\t/' \
    | column -s $'\t' -t
}

function index() {
  local value="$1"
  shift
  local size="$#"
  for ((i = 0; i < $size; i++)); do
    [[ "$1" == "${value}" ]] && {
      echo $i
      return
    }
    shift
  done
  echo -1
  return -1
}

function add_if_missing() {
  local var="$1"
  eval "local array=(\"\${${var}[@]}\")"
  shift
  local values=("$@")

  if [[ "$(index "${values[0]}" "${array[@]}")" -eq -1 ]]; then
    eval "${var}+=(\"\${values[@]}\")"
  fi
}

main "$@"
