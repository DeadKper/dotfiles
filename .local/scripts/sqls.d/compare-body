#!/bin/fish

if test (count $argv) != 2
    echo "usage: $(basename (status -f)) sql_folder compare_folder"
    return 1
end

set -l comp_data (get_sql_func_name "$argv[2]")

if test -d errors
    rm -rf errors
end

set -l count 0

get_sql_func_name "$argv[1]" | while read -l data
    set -l data (echo "$data" | sd '\t' '\n')

    set -l found (printf '%s\n' $comp_data | rg -i "^$data[1]\t")

    if test (count $found) -gt 1
        set found (printf '%s\n' $found | rg -F "$data[2]")
    end

    if test (count $found) -gt 1
        set found (printf '%s\n' $found | rg -i "(^|/)$(basename "$data[3]")\$")
    end

    if test (count $found) -gt 1
        echo "too many compares found: $(basename "$data[3]")" >&2
        continue
    end

    if test (count $found) -lt 1
        echo "no compare found: $(basename "$data[3]")" >&2
        continue
    end

    set -l found (echo $found | sd '\t' '\n')

    set -l cut1 (cat  "$data[3]" | rg -in '^\s*declare;?\s*$' | head -n 1 | sd ':.*$' '')
    set -a cut1 (cat  "$data[3]" | rg -in '^\s*end;?\s*$'     | tail -n 1 | sd ':.*$' '')
    set -l cut2 (cat "$found[3]" | rg -in '^\s*declare;?\s*$' | head -n 1 | sd ':.*$' '')
    set -a cut2 (cat "$found[3]" | rg -in '^\s*end;?\s*$'     | tail -n 1 | sd ':.*$' '')

    sed -n "$cut1[1],$cut1[2]p;$cut1[2]q" "$data[3]" | sd '\s*$' '' >test1.tmp
    sed -n "$cut2[1],$cut2[2]p;$cut2[2]q" "$found[3]" | sd '\s*$' '' >test2.tmp

    nvim --headless +"set nobomb | set fenc=utf8 | x" test1.tmp &>/dev/null
    nvim --headless +"set nobomb | set fenc=utf8 | x" test2.tmp &>/dev/null

    cat test1.tmp | sd -f e '\n+$' '' >test1.tmp
    cat test2.tmp | sd -f e '\n+$' '' >test2.tmp

    if not test "$(md5 test1.tmp | sd '\s.*$' '')" = "$(md5 test2.tmp | sd '\s.*$' '')"
        echo "does not check out: $(basename "$data[3]")" >&2
        if not test -d errors
            mkdir errors
        end
        mv test1.tmp "errors/$count-org-$(basename "$data[3]")"
        mv test2.tmp "errors/$count-cmp-$(basename "$found[3]")"
        set count (math $count + 1)
    end
end

if test -f test1.tmp
    rm test1.tmp test2.tmp
end
